# 算数运算符:  + - * /  // **

# print('1', '2', '3', sep='#', end='\n')  # end末尾默认是 \n，sep打印的分隔符 默认是' '
#
# print(3 / 2)  # 除以
# print(3 // 2)  # 整除
# print(6 % 4)  # 取余数
#
# a = input('请输入3位数的整数：')
# print(int(a) // 100)  # 百位数
# print(int(a) // 10 % 10)  # 十位数
# print(int(a) % 10)  # 个位数

# 赋值运算符 = -= += *= /= //= **= %=

# a = 8
# b = 4
# c = 0
# c = a + 1
# print(a, b, c)
# a += b
# print(a)
#
# a //= b
# print(a)

# 关系运算符 boolean 结果: True False  < > >= <= == != is
# a = 12
# b = 23
# c = '1'
# print(a > b) #False
# print(a < b) #True
# print(a == b) #False
# print(a != b) #True
# print(a != c) #True
#
# # 按照字母的ASCII码比较的  字典顺序比较的
# x = 'abcf'
# y = 'abcd'
# print(x>y)
# print(x<y)

# print(5 < a < 20)


# 逻辑运算符  and or not
# # and 与 并且  只要一侧为假，结果就是为假，只有两侧都为真，结果才是为真，两侧为假，结果也为假
# a = 1
# b = 3
# print(a and b)  # 3 and 两边都是非0数字，结果是最后面的数组值
#
# c = 0
# print(c and a)  # 0 and 两边只要一边为0，结果都是为0
#
# print('*' * 50)
#
# print(a > c and a < b)  # True
# # or 或  只要一侧为真，结果都为真，结果为真就会输出，不会再计算后面的值
#
# print('*' * 50)
# print(a or b)  # 1 # 结果都为真会输出a 就结束了
# print(c or a)  # 1 # 结果都为真就会输出
#
# # 场景: 1.账号密码 2.手机号 验证码 会用到 or
#
# # not 会涉及到运算符的问题
# print(not a > c)


# 字符串格式化输出
# '''
# %s  字符串  string
# %d  整数  digit
# %f  浮点型  float
# '''
# name = 'puchen'
# age = 26
#
# # print('我喜欢听' + str(age) + '岁' + name + '唱歌!')
# print('我喜欢听%d岁%s唱歌!' % (age, name))
# maoney = 999.95
# print('%d岁的%s一首歌挣了%f块钱！' % (age, name, maoney))
# print('%s岁的%s一首歌挣了%s块钱！' % (age, name, maoney))
# print('%d岁的%s一首歌挣了%.3f块钱！' % (age, name, maoney))


# 进制
# 十进制转二进制   10  ( 64 32 16 8 4 2 1) --> 1 0 1 0
# n = 962464
# print(bin(n))   #0b10010101  0b代表的是二进制
#
# print(oct(n))   #0o225   0o代表的是八进制
#
# print(hex(n))   #0x95  0x代表的是十六进制

# n = 0x558
# result = int(n)
# print(result)
#
# result = bin(n)  #无论当前参数是多少进制 都可以转换
# print(result)
#
# result = oct(n)   #无论当前参数是多少进制 都可以转换
# print(result)


# 位运算  针对二进制进行的运算   1为真  0 为假
# $ 按位与运算  | 按位或运算   ^ 按位异或运算   ~  按位取反运算  <<  左移   >>  右移
# n1 = 0b0110
# n2 = 0b0010
# print(n1 & n2)
# print(~n1)

# bit byte     1 byte  = 8bit  整数占4个byte
# 00000000000000000000000000000000..0010

# 明确:
'''
1.已知十进制负数，求二进制负数   正数的原码  原码取反 加1  得到的二进制就是负数的二进制
    -7的进制
        步骤
            1.先求+7的二进制：0000 0111 原码
            2.反码: 1111 1000
            3.补码: 1111 1001
            -7的二进制就是这个: 1111 1001
2.已知二进制的负数（判断是否是负的二进制的依据，看二进制的最高位， 1111 1010  最高位是1则为负数，最高位为0则为正数）  求对应的十进制
        二进制(负数)
        二进制减1的操作   取反  原码   将原码转成十进制，在十进制的前面添加负号: -
        已知:二进制 1111 1010 十进制的表示?   -6
        
3.练习 
~5  就是讲5的二进制取反   ~7   0111   1000   0111  1000 -->  -8
-9二进制表示   0000 1001  1111 0110 --> 1111 0111  
-4  打印出来的十进制  0000 0100   1111 1011  1111 1100    0000 0011 -->  3  
1111 1101的十进制是多少  1111 1100   0000 0011  --> -3

'''

'''
位运算:  整数有32位
<<  左移   >>  右移

'''
n = 12  # 0000 1100
print(n << 2)  # 0000 1100  -->> 0011 0000
print(n >> 3)  # 0000 1100  -->> 0000 0001

n = 26
print(n << 4)  # 26*2^4--> 26*16

n = 12  # 整除
print(n >> 4)  # 12//2^4--> 12//16  --> 0

n = 89  # 整除
print(n >> 5)

# 如果boolean参与运算的话  False 会当成0  True会当成1 来计算
a = 1
b = 2
x = 5
print(b > a + x < a + b)
print(a + True)

# 运算符的优先级（）
